{"version":3,"sources":["reducer.ts","actions.ts","middleware.ts","store.ts","Status.tsx","LineChart.tsx","Layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MESSAGE_RECEIVED","createAction","WEBSOCKET_CONNECTED","reducer","createReducer","streams","status","type","state","action","payload","streamName","ask","bid","time","open","close","index","map","stream","indexOf","console","log","forEach","push","length","splice","rootReducer","combineReducers","OPEN_SOCKET","middleware","dispatch","next","endpoint","join","socket","WebSocket","onopen","send","JSON","stringify","onerror","onclose","onmessage","event","data","parse","highestAsk","parseFloat","a","highestBid","b","o","c","date","Date","E","getHours","substr","getMinutes","getSeconds","s","store","configureStore","flushing","keyframes","Light","styled","div","props","color","Status","useSelector","LineChart","title","dataset1","dataset2","label1","label2","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","options","display","text","fontColor","fontSize","legend","position","Container","Layout","style","flexDirection","flexBasis","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iNASaA,EAAmBC,YAA0B,mBAC7CC,EAAsBD,YAAsB,sBAEnDE,EAAUC,YAPgB,CAC5BC,QAAS,GACTC,QAAQ,IAKiB,mBACxBN,EAAiBO,MAAO,SAACC,EAAOC,GAC7B,MAAoDA,EAAOC,QAAnDC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,IAAKC,EAAzB,EAAyBA,IAAKC,EAA9B,EAA8BA,KAAMC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,MAClCX,EAAYG,EAAZH,QAEFY,EADcZ,EAAQa,KAAI,SAAAC,GAAM,OAAIA,EAAOR,cACvBS,QAAQT,GAClCU,QAAQC,IAAIb,EAAOC,UACJ,IAAXO,EACAZ,EAAQkB,SAAQ,SAAAJ,GACRA,EAAOR,aAAeA,IACtBQ,EAAOP,IAAIY,KAAKZ,GAChBO,EAAON,IAAIW,KAAKX,GAChBM,EAAOJ,KAAKS,KAAKT,GACjBI,EAAOH,MAAMQ,KAAKR,GAClBG,EAAOL,KAAKU,KAAKV,IAEjBK,EAAOP,IAAIa,OAAS,KACpBN,EAAOP,IAAIc,OAAO,EAAG,GACrBP,EAAON,IAAIa,OAAO,EAAG,GACrBP,EAAOJ,KAAKW,OAAO,EAAG,GACtBP,EAAOH,MAAMU,OAAO,EAAG,GACvBP,EAAOL,KAAKY,OAAO,EAAG,OAI9BrB,EAAQmB,KAAK,CACTb,aACAC,IAAK,CAACA,GACNC,IAAK,CAACA,GACNG,MAAO,CAACA,GACRD,KAAM,CAACA,GACPD,KAAM,CAACA,QA/BM,cAuCxBZ,EAAoBK,MAAO,SAACC,EAAOC,GAChCD,EAAMF,OAASG,EAAOC,WAxCD,IA4ChBiB,EAAcC,YAAgB,CACvCzB,QAASA,ICvDA0B,EAAc5B,YAAa,cCkDzB6B,EAhDgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,SAACC,GAAD,OAAe,SAACvB,GAC7D,IAAQF,EAASE,EAATF,KAER,GADAyB,EAAKvB,GACDF,IAASsB,EAAYtB,KAAM,CAC3B,IACM0B,EAAW,oCADD,CAAC,gBAAiB,gBAAiB,iBACYC,KAAK,KAE9DxB,EAAU,CACZ,OAAU,YACV,OAAU,CACN,gBACA,gBACA,iBAGJ,GAAM,GAGJyB,EAAS,IAAIC,UAAUH,GAG7BE,EAAOE,OAAS,WACZF,EAAOG,KAAKC,KAAKC,UAAU9B,IAC3BqB,EAAS7B,GAAoB,KAEjCiC,EAAOM,QAAU,WACbV,EAAS7B,GAAoB,KAEjCiC,EAAOO,QAAU,WACbX,EAAS7B,GAAoB,KAEjCiC,EAAOQ,UAAY,SAACC,GAChB,IAAMC,EAAON,KAAKO,MAAMF,EAAMC,MAExBE,EAAaC,WAAWH,EAAKI,GAC7BC,EAAaF,WAAWH,EAAKM,GAC7BpC,EAAOiC,WAAWH,EAAKO,GACvBpC,EAAQgC,WAAWH,EAAKQ,GACxBC,EAAO,IAAIC,KAAc,IAATV,EAAKW,GACrB1C,GAAQ,IAAMwC,EAAKG,YAAYC,QAAQ,GACjC,KAAO,IAAMJ,EAAKK,cAAcD,QAAQ,GACxC,KAAO,IAAMJ,EAAKM,cAAcF,QAAQ,GACvC,aAAT5C,GACAiB,EAAS/B,EAAiB,CAAEW,WAAYkC,EAAKgB,EAAGjD,IAAKmC,EAAYlC,IAAKqC,EAAYpC,OAAMC,OAAMC,gBC1CxG8C,EAAQC,YAAe,CACzB5D,QAASwB,EACTG,WAAY,CAACA,KAGjBgC,EAAM/B,SAASF,KAEAiC,I,MAAAA,I,+BCPTE,EAAWC,YAAH,0DAGRC,EAAQC,IAAOC,IAAV,wPAIO,SAAAC,GAAK,OAAIA,EAAMC,QAGXN,GAaPO,EATA,WACX,IAAMjE,EAASkE,aAAgC,SAAAhE,GAAK,OAAIA,EAAML,QAAQG,UACtE,OACI,gCACI,cAAC4D,EAAD,CAAOI,MAAOhE,EAAQ,UAAY,YAAY,uBAAM,2B,gBCiCjDmE,EAlDG,SAACJ,GACf,IAAQvD,EAAoDuD,EAApDvD,KAAM4D,EAA8CL,EAA9CK,MAAOC,EAAuCN,EAAvCM,SAAUC,EAA6BP,EAA7BO,SAAUC,EAAmBR,EAAnBQ,OAAQC,EAAWT,EAAXS,OAE3CjC,GADQ2B,aAAkC,SAAAhE,GAAK,OAAIA,EAAML,WAClD,CACT4E,OAAO,YAAKjE,GACZkE,SAAU,CACN,CACIC,MAAOJ,EACPK,MAAM,EACNC,YAAa,EACbC,gBAAiB,UACjBC,YAAa,UACbC,YAAa,EACbzC,KAAK,YAAK8B,IAEd,CACIM,MAAOH,EACPI,MAAM,EACNC,YAAa,EACbC,gBAAiB,UACjBC,YAAa,UACbC,YAAa,EACbzC,KAAK,YAAK+B,OAItB,OACI,8BACI,cAAC,OAAD,CACI/B,KAAMA,EACN0C,QAAS,CACLb,MAAO,CACHc,SAAS,EACTC,KAAMf,EACNgB,UAAW,OACXC,SAAU,IAEdC,OAAQ,CACJJ,SAAS,EACTK,SAAU,QACVd,OAAQ,CACJW,UAAW,eCvCjCI,EAAY3B,IAAOC,IAAV,kIAuCA2B,EAhCA,WACX,IAAM1F,EAAUmE,aAAqC,SAAAhE,GAAK,OAAIA,EAAML,QAAQE,WAE5E,OACI,gCACI,cAAC,EAAD,IACA,cAACyF,EAAD,UACKzF,EAAQa,KAAI,SAAAC,GAAM,OACf,sBAAK6E,MAAO,CAAER,QAAS,OAAQS,cAAe,SAAUC,UAAW,SAAnE,UACI,cAAC,EAAD,CACIpF,KAAMK,EAAOL,KACb4D,MAAK,UAAKvD,EAAOR,WAAZ,eACLkE,OAAO,MACPC,OAAO,MACPH,SAAUxD,EAAOP,IACjBgE,SAAUzD,EAAON,MACrB,cAAC,EAAD,CACIC,KAAMK,EAAOL,KACb4D,MAAK,UAAKvD,EAAOR,WAAZ,yBACLkE,OAAO,OACPC,OAAO,QACPH,SAAUxD,EAAOJ,KACjB6D,SAAUzD,EAAOH,oBCtB9BmF,EARH,WACV,OACE,cAAC,IAAD,CAAUrC,MAAOA,EAAjB,SACE,cAAC,EAAD,OCISsC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d0a4eed5.chunk.js","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { combineReducers } from \"redux\";\nimport { createAction } from \"@reduxjs/toolkit\";\nimport { PayloadType, StateType } from './types'\n\nconst initialState: StateType = {\n    streams: [],\n    status: false\n}\nexport const MESSAGE_RECEIVED = createAction<PayloadType>('messageReceived');\nexport const WEBSOCKET_CONNECTED = createAction<Boolean>('websocketConnected');\n\nconst reducer = createReducer(initialState, {\n    [MESSAGE_RECEIVED.type]: (state, action) => {\n        const { streamName, ask, bid, time, open, close } = action.payload;\n        const { streams } = state\n        const streamNames = streams.map(stream => stream.streamName);\n        const index = streamNames.indexOf(streamName)\n        console.log(action.payload)\n        if (index !== -1) {\n            streams.forEach(stream => {\n                if (stream.streamName === streamName) {\n                    stream.ask.push(ask)\n                    stream.bid.push(bid)\n                    stream.open.push(open)\n                    stream.close.push(close)\n                    stream.time.push(time)\n                }\n                if (stream.ask.length > 11) {\n                    stream.ask.splice(0, 1)\n                    stream.bid.splice(0, 1)\n                    stream.open.splice(0, 1)\n                    stream.close.splice(0, 1)\n                    stream.time.splice(0, 1)\n                }\n            })\n        } else {\n            streams.push({\n                streamName,\n                ask: [ask],\n                bid: [bid],\n                close: [close],\n                open: [open],\n                time: [time]\n            })\n        }\n\n        // console.log(stream)\n        \n\n    },\n    [WEBSOCKET_CONNECTED.type]: (state, action) => {\n        state.status = action.payload;\n    }\n})\n\nexport const rootReducer = combineReducers({\n    reducer: reducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const OPEN_SOCKET = createAction('openSocket');","import { AnyAction, Middleware } from '@reduxjs/toolkit'\nimport { OPEN_SOCKET } from './actions';\nimport { MESSAGE_RECEIVED, WEBSOCKET_CONNECTED } from './reducer'\n\nconst middleware: Middleware = ({ dispatch }) => (next: any) => (action: AnyAction) => {\n    const { type } = action;\n    next(action);\n    if (type === OPEN_SOCKET.type) {\n        const streams = ['ethbtc@ticker', 'ltcbtc@ticker', 'bnbbtc@ticker']\n        const endpoint = 'wss://stream.binance.com:9443/ws/' + streams.join('/');\n        // /stream?streams=<streamName1>/<streamName2>/<streamName3>\n        const payload = {\n            \"method\": \"SUBSCRIBE\",\n            \"params\": [\n                \"ethbtc@ticker\",\n                \"ltcbtc@ticker\",\n                'bnbbtc@ticker',\n                // 'wavesbtc@ticker',\n            ],\n            \"id\": 1\n        }\n\n        const socket = new WebSocket(endpoint);\n\n        // Connection opened\n        socket.onopen = () => {\n            socket.send(JSON.stringify(payload));\n            dispatch(WEBSOCKET_CONNECTED(true));\n        };\n        socket.onerror = () => {\n            dispatch(WEBSOCKET_CONNECTED(false));\n        }\n        socket.onclose = () => {\n            dispatch(WEBSOCKET_CONNECTED(false));\n        }\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data)\n            // console.log(data)\n            const highestAsk = parseFloat(data.a)\n            const highestBid = parseFloat(data.b)\n            const open = parseFloat(data.o);\n            const close = parseFloat(data.c);\n            const date = new Date(data.E * 1000);\n            const time = ('0' + date.getHours()).substr(-2) + \n                        ':' + ('0' + date.getMinutes()).substr(-2) + \n                        ':' + ('0' + date.getSeconds()).substr(-2);\n            if (time !== \"aN:aN:aN\") {\n                dispatch(MESSAGE_RECEIVED({ streamName: data.s, ask: highestAsk, bid: highestBid, time, open, close }))\n            }\n        }\n    }\n}\nexport default middleware;","import { configureStore } from \"@reduxjs/toolkit\"\nimport { rootReducer } from \"./reducer\"\nimport middleware from './middleware'\nimport { OPEN_SOCKET } from \"./actions\";\n\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: [middleware],\n});\n\nstore.dispatch(OPEN_SOCKET());\n\nexport default store;","import React from 'react'\nimport { useSelector } from 'react-redux';\nimport styled, { keyframes } from 'styled-components'\nimport { RootState } from './reducer';\n\nconst flushing = keyframes`\n    50% {background: black;}\n`;\nconst Light = styled.div`\n    border-radius: 20px;\n    width: 20px;\n    height: 20px;\n    background: ${props => props.color};\n    float: right;\n    margin: 20px;\n    animation-name: ${flushing};\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n`;\nconst Status = () => {\n    const status = useSelector<RootState, boolean>(state => state.reducer.status)\n    return (\n        <div>\n            <Light color={status? '#33a532' : '#ff0000'}/><br /><br /> \n        </div>\n    )\n}\n\nexport default Status\n","import React from 'react'\nimport { Line } from 'react-chartjs-2'\nimport { useSelector } from 'react-redux'\nimport { RootState } from './reducer'\nimport { LineChartProps, StateType } from './types'\n\nconst LineChart = (props: LineChartProps) => {\n    const { time, title, dataset1, dataset2, label1, label2 } = props;\n    const state = useSelector<RootState, StateType>(state => state.reducer)\n    const data = {\n        labels: [...time],\n        datasets: [\n            {\n                label: label1,\n                fill: false,\n                lineTension: 0,\n                backgroundColor: '#04AA40',\n                borderColor: '#04AA40',\n                borderWidth: 2,\n                data: [...dataset1]\n            },\n            {\n                label: label2,\n                fill: false,\n                lineTension: 0,\n                backgroundColor: '#E80C3A',\n                borderColor: '#E80C3A',\n                borderWidth: 2,\n                data: [...dataset2]\n            }\n        ]\n    }\n    return (\n        <div>\n            <Line\n                data={data}\n                options={{\n                    title: {\n                        display: true,\n                        text: title,\n                        fontColor: '#ddd',\n                        fontSize: 16\n                    },\n                    legend: {\n                        display: true,\n                        position: 'right',\n                        labels: {\n                            fontColor: '#fff'\n                        },\n                    },\n                }}\n            />\n        </div>\n    )\n}\n\nexport default LineChart\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { RootState } from './reducer'\nimport Status from './Status'\nimport { StateType, StreamData } from './types'\nimport styled from 'styled-components'\nimport LineChart from './LineChart'\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin: 1em;\n`;\nconst Layout = () => {\n    const streams = useSelector<RootState, StreamData[]>(state => state.reducer.streams)\n\n    return (\n        <div>\n            <Status />\n            <Container>\n                {streams.map(stream => (\n                    <div style={{ display: 'flex', flexDirection: 'column', flexBasis: '450px' }}>\n                        <LineChart\n                            time={stream.time}\n                            title={`${stream.streamName} Best Price`}\n                            label1='Ask'\n                            label2='Bid'\n                            dataset1={stream.ask}\n                            dataset2={stream.bid} />\n                        <LineChart\n                            time={stream.time}\n                            title={`${stream.streamName} Open and Close Price`}\n                            label1='Open'\n                            label2='Close'\n                            dataset1={stream.open}\n                            dataset2={stream.close} />\n                    </div>\n                ))}\n\n\n            </Container>\n        </div>\n    )\n}\n\nexport default Layout\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport LineChart from './LineChart';\nimport store from './store';\nimport './app.css'\nimport Layout from './Layout';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Layout />\n    </Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}